Spring Framework y Spring Boot (2024)
*************************************

Implementación de Cloneable
===========================

package com.andres.springboot.di.app.springbootdi.models;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Product implements Cloneable {
    
    private Long id;
    private String name;
    private Long price;

    // ...

    @Override
    public Object clone()  {
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            return new Product(this.getId(), this.getName(), getPrice());
        }
    }
}

Implementar esta instancia garantiza la inmutabilidad de la instancia que se desea trabajar. Al implementar el método clone, se asegura que, si no existe el objeto creado, puede crear uno nuevo.

Inyección de dependencias (DI)
==============================

Patrón que permite trabajar con referencias que pertenecen a un objeto previamente creado, a fin de lograr reusabilidad del mismo.
Un framework como Spring Boot permite generar un contenedor que reciba los objetos reutilizables a lo largo del programa, es bajo esta idea que existe la DI.

Estereotipos de componentes (@Component)
========================================

Son las especializaciones derivadas de Component que tienen sus propias anotaciones y realizan tareas de acuerdo a la capa de desarrollo:

@Repository: es empleado para interfaces que trabajan con objetos de acceso a datos (DAO), pertenece a la capa de persistencia.
@Service: es empleado en los servicios: dinamizan la lógica de negocio del sistema.
@Controller: se emplea para los endpoints accesibles desde el navegador, desde los cuales se consumen los servicios.

DI en Spring Boot
=================

Repositorio:

public interface ProductRepository {
    List<Product> findAll();

    Product findById(Long id);
}

Implementación de la interfaz repositorio:

@Service
public class ProductServiceImpl implements ProductService {

    private ProductRepository repository;

    public ProductServiceImpl(ProductRepository repository) {
        this.repository = repository;
    }

    // ...
}

Esta es una forma universal de hacer DI en una clase (en otros lenguajes de programación es similar).


DI con Autowired
================

En lugar de:

    private ProductRepository repository;

    public ProductServiceImpl(ProductRepository repository) {
        this.repository = repository;
    }

Se puede escribir:

    @Autowired
    private ProductRepository repository;

@Autowired es la anotación que permite trabajar con DI, respetando la inmutabilidad y creando una única instancia aprovechable para toda la clase.


DI para repositorios con más de una implementación
==================================================

Sea el repositorio:

public interface ProductRepository {
    List<Product> findAll();

    Product findById(Long id);
}

Y sus implementaciones:

@Repository("productFoo")
public class ProductRepositoryFoo implements ProductRepository {

    @Override
    public List<Product> findAll() {
        return Collections.singletonList(new Product(1L, "Monitor Asus 27", 600L));
    }

    @Override
    public Product findById(Long id) {
        return new Product(id, "Monitor Asus 27", 600L);
    }
    
}

@Repository("productList")
public class ProductRepositoryImpl implements ProductRepository {
    
    private List<Product> data;

    public ProductRepositoryImpl() {
        this.data = Arrays.asList(
                new Product(1L, "Memoria corsair 32", 300L),
                new Product(2L, "Cpu Intel Core i9", 850L),
                new Product(3L, "Teclado Razer Mini 60%", 180L),
                new Product(4L, "Motherboard Gigabyte", 490L));
    }

    @Override
    public List<Product> findAll() {
        return data;
    }

    @Override
    public Product findById(Long id) {
        return data.stream().filter(p -> p.getId().equals(id)).findFirst().orElse(null);
    }
  
}

public class ProductRepositoryJson implements ProductRepository {

    private List<Product> list;

    public ProductRepositoryJson() {
        Resource resource = new ClassPathResource("json/product.json");
        readValueJson(resource);
    }

    public ProductRepositoryJson(Resource resource) {
        readValueJson(resource);
    }

    private void readValueJson(Resource resource) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            list = Arrays.asList(objectMapper.readValue(resource.getInputStream(), Product[].class));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<Product> findAll() {
        return list;
    }

    @Override
    public Product findById(Long id) {
        return list.stream().filter(p -> p.getId().equals(id)).findFirst().orElseThrow();
    }
    
}

En este caso va a generar error al levantar el proyecto. Solo debe reconocerse una implementación de ProductRepository.

@Primary
--------

Se debe usar la anotación @Primary:

@Primary
@Repository("productList")
public class ProductRepositoryImpl implements ProductRepository {
    // ...
}
    
Para tomar esta implementación por defecto.

@Qualifier
----------

Esta anotación toma una implementación específica. Sea el servicio:

@Service
public class ProductServiceImpl implements ProductService {

    // ...

    private ProductRepository repository;

    public ProductServiceImpl(@Qualifier("productList") ProductRepository repository) {
        this.repository = repository;
    }

    // ...
}

En este caso, en lugar de tomar la implementación con la anotación @Primary, tomará el repositorio asignado con "productList", es decir:

@Repository("productList")
public class ProductRepositoryImpl implements ProductRepository // ...

También puede tomarse desde un @Bean. Por ejemplo, sea el siguiente bean:

@Configuration
@PropertySource("classpath:config.properties")
public class AppConfig {

    // ...
    
    @Bean("productJson")
    ProductRepository productRepositoryJson() {
        return new ProductRepositoryJson();
    }
    
}

Es posible tomar la implementación asignada como "productJson" en el servicio:

    private ProductRepository repository;

    public ProductServiceImpl(@Qualifier("productJson") ProductRepository repository) {
        this.repository = repository;
    }





















